[
["index.html", "PSY4003 - Intro to Social Psychology Overview 0.1 Further sources 0.2 A note on open teaching materials", " PSY4003 - Intro to Social Psychology Lukas Wallrich 2020-09-11 Overview This page shares the materials for the Social Psychology part of the PSY4003 module and contains some further notes. I am keeping it here rather than on Moodle so that I can keep it open (see Open Teaching Materials). It is a living document and will grow over time - feel free to raise any issues and suggestions here and bring questions to the live sessions. 0.1 Further sources This guide does not aim to be comprehensive, but just to provide sufficient orientation. There are many fantastic free online resources that go further. 0.1.1 MyModules (Moodle) Some copyrighted materials are only available on MyModules. You can also find all submissions links for the assignments there. 0.1.2 Textbooks Given the current situation, I will mostly refer to a good recent textbook that is freely available online: Principles of Social Psychology. You can also download it as a PDF file if you prefer that. There will be one or two chapters that are required reading for each week. Other textbooks for Social Psychology will cover most of the content as well, so you are welcome to use those for additional reading. An introduction to Social Psychology, edited by Wolfgang Stroebe and Miles Hewstone, is good, and used copies of earlier editions can be found quite cheaply on Amazon at the moment 0.1.3 Reading list Each weekly section in this guide will start with a set of recommended readings. You do not need to read every word of them, but make sure to read the key parts (e.g., abstracts, summaries, discussion sections), so that you can choose where to go further and remember where to find information when it comes to the assignments. 0.1.4 Independent reading When it comes to the assignment, you will have to show that you read independently - however, even earlier, it can be fun to explore interesting things further. To find readings, you can use * the St Mary’s library catalogue should be your first point of call and links to many online resources * Google Scholar is a great search engine to find academic articles. If you want to use it regularly, link it to your St Mary’s account as that will make it much easier to get access to articles behind paywalls. Go to Google Scholar Library Links and search for St Mary’s - the correct result is called “St Mary’s University - Full-text @ St Mary’s” 0.2 A note on open teaching materials Why keep materials here rather than on Moodle? Basically, because I like transparency and dislike any kinds of paywalls in science. Open Access to journal articles without having to pay for an expensive subscription has been one of the key demands on the Open Science movement, and we are slowly getting there. Open access to teaching materials is a next step, and this is one of my small contributions to that movement. "],
["getting-started-with-r.html", "Topic 1 Getting started with R 1.1 Install R on your computer 1.2 Some key concepts", " Topic 1 Getting started with R 1.1 Install R on your computer R is highly customizable, so that your life is a lot easier if you use your own copy rather than a shared copy on a university computer. To install it on your computer, follow these detailed instructions in Section 1.4 of the R for Data Science book Then start exploring - using R is a skill that comes with practice, not with reading about it. Most example from these notes can be copy-pasted or typed into R. Do that whenever possible to see what you are able to do and where you still have questions. 1.2 Some key concepts If you understand the following concepts, using R will make a lot more sense. 1.2.1 R, RStudio and R packages You can think about the different parts of R in terms of a computer or smartphone. In that analogy: R is the processor and operating system that carries out everything under the hood. It also contains many basic capabilities for everyday tasks RStudio is the user interface. The following parts are most relevant: Console to type and run commands (usually to try things out or do things that need to be done once only) File editor to develop production code (i.e. code needed to reproduce your analyses and create reports). Here you edit .Rmd files (or plain .R scripts, not used in this course) Environment shows a list of all variables you have created. For dataframes, it shows the number of observations (rows) and variables (columns). Clicking on the name opens the data, clicking on the arrow shows some details History is a searchable list of all commands you have run - helpful if you want to resuse something done a while back. R packages are the apps Installed once, using install.packages(\"name\") Loaded in every session, using library(name) For a more comprehensive introduction to R, you can watch this video: 1.2.2 Data and variables in R Lines starting with a # are comments that are ignored by R. I use them below to explain parts of the code further. # &lt;- saves the text &quot;value&quot; into the variable variableName month &lt;- &quot;January&quot; # c() combines several values into one vector that can then be saved as a variable weekend &lt;- c(&quot;Saturday&quot;, &quot;Sunday&quot;) sleepHrs &lt;- c(4, 9) #Variables can then be combined into dataframes (sth like tables) sleepData &lt;- data.frame(day = weekend, hours = sleepHrs) #Variables within dataframes are accessed using the $ operator sum(sleepData$hours) ## [1] 13 Variable classes indicate what kind of data a variable contains. There are four main types numeric, integer or double (i.e. numbers, the differences are not relevant to us) character, i.e. any text logical, i.e. TRUE/FALSE values and factors, i.e. categorical variables, for example weekdays. The class() function shows the class of a single variable, the str() and glimpse() functions include the classes of all variables in a dataframe. Usually, R gets the classes right by itself and converts as required. If you need to change variable classes, you can use the as.numeric(), as.character(), as.logical(), as.factor() etc. functions. One thing to note: the data.frame() function and many functions that import data automatically change text to factors, which is often what we want (for instance, it correctly did this for weekdays above). To prevent this conversion, add stringsAsFactors = FALSE as an argument to the function, or convert the columns later using the as.character() function. class(sleepData$hours) str(sleepData) ## [1] &quot;numeric&quot; ## &#39;data.frame&#39;: 2 obs. of 2 variables: ## $ day : chr &quot;Saturday&quot; &quot;Sunday&quot; ## $ hours: num 4 9 1.2.3 Functions in R All work in R is based on calling functions that do something. A function is called by its name with () behind. If you just type the name, the function is printed out - you usually don’t want this. #Some functions work without any additional arguments timestamp() #This shows the time this code segment was run - might be helpful if you create multiple reports #Functions that work with given data are more helpful - that data is given as an &#39;argument&#39; print(&quot;Hello&quot;) mean(c(1,2,3)) #Additionally, arguments can contain instructions to the function mean(c(1,2,3, NA), na.rm = TRUE) #NA is a missing value, na.rm tells the mean function to remove it before calculating the mean #To save the results of a function into a variable, use the &lt;- operator again variableName &lt;- mean(c(1,2,3, NA), na.rm = TRUE) ## ##------ Fri Sep 11 11:25:51 2020 ------## ## [1] &quot;Hello&quot; ## [1] 2 ## [1] 2 To learn more about the arguments accepted by a specific function, use the ? command to open the help page, e.g., by typing ?mean. Arguments are matched by their name, as with na.rm = above; if no name is given, they are matched by their position in the function call. Usually, only very common arguments, typically the data, should be left unnamed. 1.2.4 Key R packages The most essential packages for this course are included in the tidyverse - a whole set of packages to make data manipulation and visualisation in R efficient and consistent. They include: dplyr: a package to efficiently manipulate data and create summary statistics ggplot2: a package to create all kinds of graphs readr: a package to load table data into R that is formatted as text All these packages are loaded with the library(tidyverse) command. There are some additional packages in the tidyverse that need to be loaded separately, using library(packagename). The most relevant for us are: readxl and haven: package to load data from Excel and statistical software stringr: a package to manipulate strings lubridate: a package to convert, filter and analyse times and dates 1.2.5 RMarkdown A key strength of R are reproducible analyses. For that, we don’t want to type commands and just write down the results, but rather create scripts that can produce results again and again. That also makes changes much less painful, for instance if you’ve made a mistake at the start. RMarkdown (.Rmd) files are such scripts that additionally allow to add text and split the code into separate chunks. Within them, grey chunks are code, anything else is not executed. It is just formatted (e.g., with headings and highlights) when you create the report. Markup symbols allow for easy formatting of the text, as per the instructions here. (Most of that is not required in this course, a couple of key symbols such as # to indicate headings will be introduced later.) Within .Rmd files, you need to Insert new code blocks for the major parts of the analysis. For that, use the insert button at the top of the File Editor window. When you want to test your code, you can also Run it there or by pressing Ctrl+Enter in the line you want to use (or after you have selected multiple lines to run). Finally, to create the report you need to Knit it, again using the button in the File Editor Without installing anything else, you can only knit to HTML files, but those can be opened in any internet browser, so are good to share with anyone. 1.2.6 HELP! What to do when problems appear? When red text appears in the console, don’t panick. Some messages that are often entirely irrelevant are displayed in red, for example when packages are loaded. Warnings are more important, but they just alert you that something might be going wrong - read them, but then decide whether you need to worry. For instance, ggplot prints a warning when data is missing, which might or might not be a problem for you. Only Errors always need to be dealt with as they stop your commands from being executed and the .Rmd file from being knitted. Unfortunately, many R functions give rather cryptic error messages - if you are stuck, first check your code for typos, then Google the error message. Many errors occur due to common mistakes, that you need to pay attention to: Missing brackets - make sure each ( is matched by a ) in the right place. When your cursor is at a closing bracket, R highlights the opening bracket it is matched with, which helps to check your syntax Misspellings - variable names and functions need to be spelled correctly, which includes capitalisation, otherwise you might inadvertently create duplicates or cause other issues. Some functions are available in both American and British spelling (e.g., summarise()and summarize() in dplyr), but this is not always the case so that it might be sensible to always stick to American spelling Missing library() calls to load packages - if a function is not found, run library(packagename) Function masking - many packages have functions of the same name, so that packages that are loaded later mask (i.e. “over-write”) the names of functions in packages loaded earlier (for example, dplyr’s filter() function masks the filter() function in base R). Often, that is exactly what we want, but if a function does not do what you expect it to do, it’s worth specifying the package it comes from to make sure you are not actually calling a different function that has masked it. You can do that by adding the package name and ::, for example, by calling dplyr::filter() Note: If you only want to use a single function from a large package, this is an alternative to loading the full package. As you progress in R, do not try to remember everything - instead, look things up as needed, in particular things like argument names: Use ?functionName to get help in R Refer to the RStudio Cheatsheets Google your questions and pay particular attention to results from r-bloggers.com and stackoverflow.com There is also a very active R user community that is willing to help - stackoverflow.com is a good place to ask questions about R Code, while stats.stackexchange.com is the place to go with questions that are more generally about statistics. In both cases, it pays off to first google and then post questions that are as specific as possible. "],
["references.html", "Topic 2 References", " Topic 2 References This guide is created in R, an Open Source statistical programming environment, which I am using because it also makes it very easy to create nice HTML documents. The necessary packages for that are included into these references, but you certainly do not need to understand that technical stuff in order to do well in this module and your degree (though you might find it fun to learn). Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, and Winston Chang. 2018. Rmarkdown: Dynamic Documents for R. https://CRAN.R-project.org/package=rmarkdown. Barr, Dale, and Lisa DeBruine. 2019. Webex: Create Interactive Web Exercises in ’R Markdown’. https://CRAN.R-project.org/package=webex. DeVellis, Robert F. 2016. Scale Development: Theory and Applications. Vol. 26. Sage publications. Henry, Lionel, and Hadley Wickham. 2020. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr. Lakens, Daniël, Anne M. Scheel, and Peder M. Isager. 2018. “Equivalence Testing for Psychological Research: A Tutorial.” Advances in Methods and Practices in Psychological Science 1 (2): 259–69. https://doi.org/10.1177/2515245918770963. Müller, Kirill, and Hadley Wickham. 2020. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble. R Core Team. 2020. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. Wickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org. ———. 2017. Tidyverse: Easily Install and Load the ’Tidyverse’. https://CRAN.R-project.org/package=tidyverse. ———. 2019a. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr. ———. 2019b. Tidyverse: Easily Install and Load the ’Tidyverse’. https://CRAN.R-project.org/package=tidyverse. ———. 2020. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats. Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686. Wickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2020. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2. Wickham, Hadley, Romain François, Lionel Henry, and Kirill Müller. 2020. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr. Wickham, Hadley, and Lionel Henry. 2020. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr. Wickham, Hadley, Jim Hester, and Romain Francois. 2018. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr. Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2016. Bookdown: Authoring Books and Technical Documents with R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/bookdown. ———. 2020. Bookdown: Authoring Books and Technical Documents with R Markdown. https://CRAN.R-project.org/package=bookdown. "],
["placeholder.html", "A Placeholder", " A Placeholder Some appendices might be added at some point "]
]
